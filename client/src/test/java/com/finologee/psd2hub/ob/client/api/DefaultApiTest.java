/*
 * Account Information APIs
 * Swagger specification for Account Information APIs
 *
 * OpenAPI spec version: v1.0.0
 * Contact: Craig.Greenhouse@openbanking.org.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.finologee.psd2hub.ob.client.api;

import com.finologee.psd2hub.ob.client.ApiException;
import com.finologee.psd2hub.ob.client.api.DefaultApi;
import com.finologee.psd2hub.ob.client.model.AccountGETResponse;
import com.finologee.psd2hub.ob.client.model.AccountGETResponse1;
import com.finologee.psd2hub.ob.client.model.AccountRequestPOSTRequest;
import com.finologee.psd2hub.ob.client.model.AccountRequestPOSTResponse;
import com.finologee.psd2hub.ob.client.model.AccountTransactionsGETResponse;
import com.finologee.psd2hub.ob.client.model.BalancesGETResponse;
import com.finologee.psd2hub.ob.client.model.BeneficiariesGETResponse;
import com.finologee.psd2hub.ob.client.model.ProductGETResponse;
import com.finologee.psd2hub.ob.client.model.StandingOrdersGETResponse;

import org.joda.time.DateTime;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    
    /**
     * Create an account request
     *
     * Create an account request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAccountRequestTest() throws ApiException {
        AccountRequestPOSTRequest body = null;
        String xFapiFinancialId = null;
        String authorization = null;
        String xJwsSignature = null;
        String xFapiCustomerLastLoggedTime = null;
        String xFapiCustomerIpAddress = null;
        String xFapiInteractionId = null;
        AccountRequestPOSTResponse response = api.createAccountRequest(body, xFapiFinancialId, authorization, xJwsSignature, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);

        // TODO: test validations
    }
    
    /**
     * Delete an account request
     *
     * Delete an account request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAccountRequestTest() throws ApiException {
        String accountRequestId = null;
        String authorization = null;
        String xFapiFinancialId = null;
        api.deleteAccountRequest(accountRequestId, authorization, xFapiFinancialId);

        // TODO: test validations
    }
    
    /**
     * Get Account
     *
     * Get an account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        String accountId = null;
        String xFapiFinancialId = null;
        String authorization = null;
        String xFapiCustomerLastLoggedTime = null;
        String xFapiCustomerIpAddress = null;
        String xFapiInteractionId = null;
        AccountGETResponse response = api.getAccount(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);

        // TODO: test validations
    }
    
    /**
     * Get Account Balances
     *
     * Get Balances related to an account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountBalancesTest() throws ApiException {
        String accountId = null;
        String xFapiFinancialId = null;
        String authorization = null;
        String xFapiCustomerLastLoggedTime = null;
        String xFapiCustomerIpAddress = null;
        String xFapiInteractionId = null;
        BalancesGETResponse response = api.getAccountBalances(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);

        // TODO: test validations
    }
    
    /**
     * Get Account Beneficiaries
     *
     * Get Beneficiaries related to an account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountBeneficiariesTest() throws ApiException {
        String accountId = null;
        String xFapiFinancialId = null;
        String authorization = null;
        String xFapiCustomerLastLoggedTime = null;
        String xFapiCustomerIpAddress = null;
        String xFapiInteractionId = null;
        BeneficiariesGETResponse response = api.getAccountBeneficiaries(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);

        // TODO: test validations
    }
    
    /**
     * Get Account Direct Debits
     *
     * Get Direct Debits related to an account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountDirectDebitsTest() throws ApiException {
        String accountId = null;
        String xFapiFinancialId = null;
        String authorization = null;
        String xFapiCustomerLastLoggedTime = null;
        String xFapiCustomerIpAddress = null;
        String xFapiInteractionId = null;
        AccountGETResponse1 response = api.getAccountDirectDebits(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);

        // TODO: test validations
    }
    
    /**
     * Get Account Product
     *
     * Get Product related to an account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountProductTest() throws ApiException {
        String accountId = null;
        String xFapiFinancialId = null;
        String authorization = null;
        String xFapiCustomerLastLoggedTime = null;
        String xFapiCustomerIpAddress = null;
        String xFapiInteractionId = null;
        ProductGETResponse response = api.getAccountProduct(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);

        // TODO: test validations
    }
    
    /**
     * Get an account request
     *
     * Get an account request
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountRequestTest() throws ApiException {
        String accountRequestId = null;
        String xFapiFinancialId = null;
        String authorization = null;
        String xFapiCustomerLastLoggedTime = null;
        String xFapiCustomerIpAddress = null;
        String xFapiInteractionId = null;
        AccountRequestPOSTResponse response = api.getAccountRequest(accountRequestId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);

        // TODO: test validations
    }
    
    /**
     * Get Account Standing Orders
     *
     * Get Standing Orders related to an account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountStandingOrdersTest() throws ApiException {
        String accountId = null;
        String xFapiFinancialId = null;
        String authorization = null;
        String xFapiCustomerLastLoggedTime = null;
        String xFapiCustomerIpAddress = null;
        String xFapiInteractionId = null;
        StandingOrdersGETResponse response = api.getAccountStandingOrders(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);

        // TODO: test validations
    }
    
    /**
     * Get Account Transactions
     *
     * Get transactions related to an account
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountTransactionsTest() throws ApiException {
        String accountId = null;
        String xFapiFinancialId = null;
        String authorization = null;
        DateTime fromBookingDateTime = null;
        DateTime toBookingDateTime = null;
        String xFapiCustomerLastLoggedTime = null;
        String xFapiCustomerIpAddress = null;
        String xFapiInteractionId = null;
        AccountTransactionsGETResponse response = api.getAccountTransactions(accountId, xFapiFinancialId, authorization, fromBookingDateTime, toBookingDateTime, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);

        // TODO: test validations
    }
    
    /**
     * Get Accounts
     *
     * Get a list of accounts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountsTest() throws ApiException {
        String xFapiFinancialId = null;
        String authorization = null;
        String xFapiCustomerLastLoggedTime = null;
        String xFapiCustomerIpAddress = null;
        String xFapiInteractionId = null;
        AccountGETResponse response = api.getAccounts(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);

        // TODO: test validations
    }
    
    /**
     * Get Balances
     *
     * Get Balances
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBalancesTest() throws ApiException {
        String xFapiFinancialId = null;
        String authorization = null;
        String xFapiCustomerLastLoggedTime = null;
        String xFapiCustomerIpAddress = null;
        String xFapiInteractionId = null;
        BalancesGETResponse response = api.getBalances(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);

        // TODO: test validations
    }
    
    /**
     * Get Beneficiaries
     *
     * Get Beneficiaries
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBeneficiariesTest() throws ApiException {
        String xFapiFinancialId = null;
        String authorization = null;
        String xFapiCustomerLastLoggedTime = null;
        String xFapiCustomerIpAddress = null;
        String xFapiInteractionId = null;
        BeneficiariesGETResponse response = api.getBeneficiaries(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);

        // TODO: test validations
    }
    
    /**
     * Get Direct Debits
     *
     * Get Direct Debits
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDirectDebitsTest() throws ApiException {
        String xFapiFinancialId = null;
        String authorization = null;
        String xFapiCustomerLastLoggedTime = null;
        String xFapiCustomerIpAddress = null;
        String xFapiInteractionId = null;
        AccountGETResponse1 response = api.getDirectDebits(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);

        // TODO: test validations
    }
    
    /**
     * Get Products
     *
     * Get Products
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProductsTest() throws ApiException {
        String xFapiFinancialId = null;
        String authorization = null;
        String xFapiCustomerLastLoggedTime = null;
        String xFapiCustomerIpAddress = null;
        String xFapiInteractionId = null;
        ProductGETResponse response = api.getProducts(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);

        // TODO: test validations
    }
    
    /**
     * Get Standing Orders
     *
     * Get Standing Orders
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStandingOrdersTest() throws ApiException {
        String xFapiFinancialId = null;
        String authorization = null;
        String xFapiCustomerLastLoggedTime = null;
        String xFapiCustomerIpAddress = null;
        String xFapiInteractionId = null;
        StandingOrdersGETResponse response = api.getStandingOrders(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);

        // TODO: test validations
    }
    
    /**
     * Get Transactions
     *
     * Get Transactions
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsTest() throws ApiException {
        String xFapiFinancialId = null;
        String authorization = null;
        String xFapiCustomerLastLoggedTime = null;
        String xFapiCustomerIpAddress = null;
        String xFapiInteractionId = null;
        DateTime fromBookingDateTime = null;
        DateTime toBookingDateTime = null;
        AccountTransactionsGETResponse response = api.getTransactions(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, fromBookingDateTime, toBookingDateTime);

        // TODO: test validations
    }
    
}
