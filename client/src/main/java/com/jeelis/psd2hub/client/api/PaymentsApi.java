/*
 * Payment Initiation APIs
 * Draft Swagger specification for Payment Initiation
 *
 * OpenAPI spec version: v1.0.0
 * Contact: craig.greenhouse@openbanking.org.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.jeelis.psd2hub.client.api;

import com.jeelis.psd2hub.client.ApiCallback;
import com.jeelis.psd2hub.client.ApiClient;
import com.jeelis.psd2hub.client.ApiException;
import com.jeelis.psd2hub.client.ApiResponse;
import com.jeelis.psd2hub.client.Configuration;
import com.jeelis.psd2hub.client.Pair;
import com.jeelis.psd2hub.client.ProgressRequestBody;
import com.jeelis.psd2hub.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.jeelis.psd2hub.client.model.PaymentSetupPOSTRequest;
import com.jeelis.psd2hub.client.model.PaymentSetupPOSTResponse;
import com.jeelis.psd2hub.client.model.PaymentSubmissionPOSTRequest;
import com.jeelis.psd2hub.client.model.PaymentSubmitPOST201Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentsApi {
    private ApiClient apiClient;

    public PaymentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createPaymentSubmission
     * @param xIdempotencyKey Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xJwsSignature Header containing a detached JWS signature of the body of the payload. (required)
     * @param body Setup a single immediate payment (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPaymentSubmissionCall(String xIdempotencyKey, String xFapiFinancialId, String authorization, String xJwsSignature, PaymentSubmissionPOSTRequest body, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/payment-submissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));
        if (xJwsSignature != null)
        localVarHeaderParams.put("x-jws-signature", apiClient.parameterToString(xJwsSignature));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PSUOAuth2Security" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPaymentSubmissionValidateBeforeCall(String xIdempotencyKey, String xFapiFinancialId, String authorization, String xJwsSignature, PaymentSubmissionPOSTRequest body, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling createPaymentSubmission(Async)");
        }
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling createPaymentSubmission(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createPaymentSubmission(Async)");
        }
        
        // verify the required parameter 'xJwsSignature' is set
        if (xJwsSignature == null) {
            throw new ApiException("Missing the required parameter 'xJwsSignature' when calling createPaymentSubmission(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPaymentSubmission(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createPaymentSubmissionCall(xIdempotencyKey, xFapiFinancialId, authorization, xJwsSignature, body, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a payment submission
     * Submit a previously setup payment
     * @param xIdempotencyKey Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xJwsSignature Header containing a detached JWS signature of the body of the payload. (required)
     * @param body Setup a single immediate payment (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return PaymentSubmitPOST201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentSubmitPOST201Response createPaymentSubmission(String xIdempotencyKey, String xFapiFinancialId, String authorization, String xJwsSignature, PaymentSubmissionPOSTRequest body, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<PaymentSubmitPOST201Response> resp = createPaymentSubmissionWithHttpInfo(xIdempotencyKey, xFapiFinancialId, authorization, xJwsSignature, body, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Create a payment submission
     * Submit a previously setup payment
     * @param xIdempotencyKey Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xJwsSignature Header containing a detached JWS signature of the body of the payload. (required)
     * @param body Setup a single immediate payment (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;PaymentSubmitPOST201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentSubmitPOST201Response> createPaymentSubmissionWithHttpInfo(String xIdempotencyKey, String xFapiFinancialId, String authorization, String xJwsSignature, PaymentSubmissionPOSTRequest body, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = createPaymentSubmissionValidateBeforeCall(xIdempotencyKey, xFapiFinancialId, authorization, xJwsSignature, body, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<PaymentSubmitPOST201Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a payment submission (asynchronously)
     * Submit a previously setup payment
     * @param xIdempotencyKey Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xJwsSignature Header containing a detached JWS signature of the body of the payload. (required)
     * @param body Setup a single immediate payment (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPaymentSubmissionAsync(String xIdempotencyKey, String xFapiFinancialId, String authorization, String xJwsSignature, PaymentSubmissionPOSTRequest body, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<PaymentSubmitPOST201Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPaymentSubmissionValidateBeforeCall(xIdempotencyKey, xFapiFinancialId, authorization, xJwsSignature, body, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentSubmitPOST201Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createSingleImmediatePayment
     * @param xIdempotencyKey Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xJwsSignature Header containing a detached JWS signature of the body of the payload. (required)
     * @param body Setup a single immediate payment (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createSingleImmediatePaymentCall(String xIdempotencyKey, String xFapiFinancialId, String authorization, String xJwsSignature, PaymentSetupPOSTRequest body, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/payments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xIdempotencyKey != null)
        localVarHeaderParams.put("x-idempotency-key", apiClient.parameterToString(xIdempotencyKey));
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));
        if (xJwsSignature != null)
        localVarHeaderParams.put("x-jws-signature", apiClient.parameterToString(xJwsSignature));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "TPPOAuth2Security" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createSingleImmediatePaymentValidateBeforeCall(String xIdempotencyKey, String xFapiFinancialId, String authorization, String xJwsSignature, PaymentSetupPOSTRequest body, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xIdempotencyKey' is set
        if (xIdempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'xIdempotencyKey' when calling createSingleImmediatePayment(Async)");
        }
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling createSingleImmediatePayment(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createSingleImmediatePayment(Async)");
        }
        
        // verify the required parameter 'xJwsSignature' is set
        if (xJwsSignature == null) {
            throw new ApiException("Missing the required parameter 'xJwsSignature' when calling createSingleImmediatePayment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createSingleImmediatePayment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createSingleImmediatePaymentCall(xIdempotencyKey, xFapiFinancialId, authorization, xJwsSignature, body, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a single immediate payment
     * Create a single immediate payment
     * @param xIdempotencyKey Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xJwsSignature Header containing a detached JWS signature of the body of the payload. (required)
     * @param body Setup a single immediate payment (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return PaymentSetupPOSTResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentSetupPOSTResponse createSingleImmediatePayment(String xIdempotencyKey, String xFapiFinancialId, String authorization, String xJwsSignature, PaymentSetupPOSTRequest body, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<PaymentSetupPOSTResponse> resp = createSingleImmediatePaymentWithHttpInfo(xIdempotencyKey, xFapiFinancialId, authorization, xJwsSignature, body, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Create a single immediate payment
     * Create a single immediate payment
     * @param xIdempotencyKey Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xJwsSignature Header containing a detached JWS signature of the body of the payload. (required)
     * @param body Setup a single immediate payment (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;PaymentSetupPOSTResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentSetupPOSTResponse> createSingleImmediatePaymentWithHttpInfo(String xIdempotencyKey, String xFapiFinancialId, String authorization, String xJwsSignature, PaymentSetupPOSTRequest body, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = createSingleImmediatePaymentValidateBeforeCall(xIdempotencyKey, xFapiFinancialId, authorization, xJwsSignature, body, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<PaymentSetupPOSTResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a single immediate payment (asynchronously)
     * Create a single immediate payment
     * @param xIdempotencyKey Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xJwsSignature Header containing a detached JWS signature of the body of the payload. (required)
     * @param body Setup a single immediate payment (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createSingleImmediatePaymentAsync(String xIdempotencyKey, String xFapiFinancialId, String authorization, String xJwsSignature, PaymentSetupPOSTRequest body, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<PaymentSetupPOSTResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createSingleImmediatePaymentValidateBeforeCall(xIdempotencyKey, xFapiFinancialId, authorization, xJwsSignature, body, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentSetupPOSTResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPaymentSubmission
     * @param paymentSubmissionId Unique identification as assigned by the ASPSP to uniquely identify the payment submission resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPaymentSubmissionCall(String paymentSubmissionId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/payment-submissions/{PaymentSubmissionId}"
            .replaceAll("\\{" + "PaymentSubmissionId" + "\\}", apiClient.escapeString(paymentSubmissionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PSUOAuth2Security", "TPPOAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPaymentSubmissionValidateBeforeCall(String paymentSubmissionId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'paymentSubmissionId' is set
        if (paymentSubmissionId == null) {
            throw new ApiException("Missing the required parameter 'paymentSubmissionId' when calling getPaymentSubmission(Async)");
        }
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling getPaymentSubmission(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPaymentSubmission(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPaymentSubmissionCall(paymentSubmissionId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a payment submission
     * Get payment submission
     * @param paymentSubmissionId Unique identification as assigned by the ASPSP to uniquely identify the payment submission resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return PaymentSubmitPOST201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentSubmitPOST201Response getPaymentSubmission(String paymentSubmissionId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<PaymentSubmitPOST201Response> resp = getPaymentSubmissionWithHttpInfo(paymentSubmissionId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get a payment submission
     * Get payment submission
     * @param paymentSubmissionId Unique identification as assigned by the ASPSP to uniquely identify the payment submission resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;PaymentSubmitPOST201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentSubmitPOST201Response> getPaymentSubmissionWithHttpInfo(String paymentSubmissionId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getPaymentSubmissionValidateBeforeCall(paymentSubmissionId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<PaymentSubmitPOST201Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a payment submission (asynchronously)
     * Get payment submission
     * @param paymentSubmissionId Unique identification as assigned by the ASPSP to uniquely identify the payment submission resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPaymentSubmissionAsync(String paymentSubmissionId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<PaymentSubmitPOST201Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPaymentSubmissionValidateBeforeCall(paymentSubmissionId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentSubmitPOST201Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSingleImmediatePayment
     * @param paymentId Unique identification as assigned by the ASPSP to uniquely identify the payment setup resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSingleImmediatePaymentCall(String paymentId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/payments/{PaymentId}"
            .replaceAll("\\{" + "PaymentId" + "\\}", apiClient.escapeString(paymentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PSUOAuth2Security", "TPPOAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSingleImmediatePaymentValidateBeforeCall(String paymentId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'paymentId' is set
        if (paymentId == null) {
            throw new ApiException("Missing the required parameter 'paymentId' when calling getSingleImmediatePayment(Async)");
        }
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling getSingleImmediatePayment(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getSingleImmediatePayment(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSingleImmediatePaymentCall(paymentId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a single immediate payment
     * Get a single immediate payment
     * @param paymentId Unique identification as assigned by the ASPSP to uniquely identify the payment setup resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return PaymentSetupPOSTResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PaymentSetupPOSTResponse getSingleImmediatePayment(String paymentId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<PaymentSetupPOSTResponse> resp = getSingleImmediatePaymentWithHttpInfo(paymentId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get a single immediate payment
     * Get a single immediate payment
     * @param paymentId Unique identification as assigned by the ASPSP to uniquely identify the payment setup resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;PaymentSetupPOSTResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PaymentSetupPOSTResponse> getSingleImmediatePaymentWithHttpInfo(String paymentId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getSingleImmediatePaymentValidateBeforeCall(paymentId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<PaymentSetupPOSTResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a single immediate payment (asynchronously)
     * Get a single immediate payment
     * @param paymentId Unique identification as assigned by the ASPSP to uniquely identify the payment setup resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSingleImmediatePaymentAsync(String paymentId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<PaymentSetupPOSTResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSingleImmediatePaymentValidateBeforeCall(paymentId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PaymentSetupPOSTResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
