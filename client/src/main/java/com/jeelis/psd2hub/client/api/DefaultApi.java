/*
 * Account Information APIs
 * Swagger specification for Account Information APIs
 *
 * OpenAPI spec version: v1.0.0
 * Contact: Craig.Greenhouse@openbanking.org.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.jeelis.psd2hub.client.api;

import com.jeelis.psd2hub.client.ApiCallback;
import com.jeelis.psd2hub.client.ApiClient;
import com.jeelis.psd2hub.client.ApiException;
import com.jeelis.psd2hub.client.ApiResponse;
import com.jeelis.psd2hub.client.Configuration;
import com.jeelis.psd2hub.client.Pair;
import com.jeelis.psd2hub.client.ProgressRequestBody;
import com.jeelis.psd2hub.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.jeelis.psd2hub.client.model.AccountGETResponse;
import com.jeelis.psd2hub.client.model.AccountGETResponse1;
import com.jeelis.psd2hub.client.model.AccountRequestPOSTRequest;
import com.jeelis.psd2hub.client.model.AccountRequestPOSTResponse;
import com.jeelis.psd2hub.client.model.AccountTransactionsGETResponse;
import com.jeelis.psd2hub.client.model.BalancesGETResponse;
import com.jeelis.psd2hub.client.model.BeneficiariesGETResponse;
import org.joda.time.DateTime;
import com.jeelis.psd2hub.client.model.ProductGETResponse;
import com.jeelis.psd2hub.client.model.StandingOrdersGETResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createAccountRequest
     * @param body Create an Account Request (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xJwsSignature Header containig a detached JWS signature of the body of the payload. (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createAccountRequestCall(AccountRequestPOSTRequest body, String xFapiFinancialId, String authorization, String xJwsSignature, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/account-requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));
        if (xJwsSignature != null)
        localVarHeaderParams.put("x-jws-signature", apiClient.parameterToString(xJwsSignature));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "TPPOAuth2Security" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createAccountRequestValidateBeforeCall(AccountRequestPOSTRequest body, String xFapiFinancialId, String authorization, String xJwsSignature, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAccountRequest(Async)");
        }
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling createAccountRequest(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createAccountRequest(Async)");
        }
        
        // verify the required parameter 'xJwsSignature' is set
        if (xJwsSignature == null) {
            throw new ApiException("Missing the required parameter 'xJwsSignature' when calling createAccountRequest(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createAccountRequestCall(body, xFapiFinancialId, authorization, xJwsSignature, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an account request
     * Create an account request
     * @param body Create an Account Request (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xJwsSignature Header containig a detached JWS signature of the body of the payload. (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return AccountRequestPOSTResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountRequestPOSTResponse createAccountRequest(AccountRequestPOSTRequest body, String xFapiFinancialId, String authorization, String xJwsSignature, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<AccountRequestPOSTResponse> resp = createAccountRequestWithHttpInfo(body, xFapiFinancialId, authorization, xJwsSignature, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Create an account request
     * Create an account request
     * @param body Create an Account Request (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xJwsSignature Header containig a detached JWS signature of the body of the payload. (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;AccountRequestPOSTResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountRequestPOSTResponse> createAccountRequestWithHttpInfo(AccountRequestPOSTRequest body, String xFapiFinancialId, String authorization, String xJwsSignature, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = createAccountRequestValidateBeforeCall(body, xFapiFinancialId, authorization, xJwsSignature, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<AccountRequestPOSTResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an account request (asynchronously)
     * Create an account request
     * @param body Create an Account Request (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xJwsSignature Header containig a detached JWS signature of the body of the payload. (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createAccountRequestAsync(AccountRequestPOSTRequest body, String xFapiFinancialId, String authorization, String xJwsSignature, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<AccountRequestPOSTResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createAccountRequestValidateBeforeCall(body, xFapiFinancialId, authorization, xJwsSignature, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountRequestPOSTResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteAccountRequest
     * @param accountRequestId Unique identification as assigned by the ASPSP to uniquely identify the account request resource. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteAccountRequestCall(String accountRequestId, String authorization, String xFapiFinancialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account-requests/{AccountRequestId}"
            .replaceAll("\\{" + "AccountRequestId" + "\\}", apiClient.escapeString(accountRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "TPPOAuth2Security" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteAccountRequestValidateBeforeCall(String accountRequestId, String authorization, String xFapiFinancialId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountRequestId' is set
        if (accountRequestId == null) {
            throw new ApiException("Missing the required parameter 'accountRequestId' when calling deleteAccountRequest(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteAccountRequest(Async)");
        }
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling deleteAccountRequest(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteAccountRequestCall(accountRequestId, authorization, xFapiFinancialId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an account request
     * Delete an account request
     * @param accountRequestId Unique identification as assigned by the ASPSP to uniquely identify the account request resource. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteAccountRequest(String accountRequestId, String authorization, String xFapiFinancialId) throws ApiException {
        deleteAccountRequestWithHttpInfo(accountRequestId, authorization, xFapiFinancialId);
    }

    /**
     * Delete an account request
     * Delete an account request
     * @param accountRequestId Unique identification as assigned by the ASPSP to uniquely identify the account request resource. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteAccountRequestWithHttpInfo(String accountRequestId, String authorization, String xFapiFinancialId) throws ApiException {
        com.squareup.okhttp.Call call = deleteAccountRequestValidateBeforeCall(accountRequestId, authorization, xFapiFinancialId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an account request (asynchronously)
     * Delete an account request
     * @param accountRequestId Unique identification as assigned by the ASPSP to uniquely identify the account request resource. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteAccountRequestAsync(String accountRequestId, String authorization, String xFapiFinancialId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteAccountRequestValidateBeforeCall(accountRequestId, authorization, xFapiFinancialId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAccount
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountCall(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{AccountId}"
            .replaceAll("\\{" + "AccountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PSUOAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountValidateBeforeCall(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccount(Async)");
        }
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling getAccount(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAccount(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAccountCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Account
     * Get an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return AccountGETResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountGETResponse getAccount(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<AccountGETResponse> resp = getAccountWithHttpInfo(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get Account
     * Get an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;AccountGETResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountGETResponse> getAccountWithHttpInfo(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountValidateBeforeCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<AccountGETResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Account (asynchronously)
     * Get an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountAsync(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<AccountGETResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountValidateBeforeCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountGETResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountBalances
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountBalancesCall(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{AccountId}/balances"
            .replaceAll("\\{" + "AccountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PSUOAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountBalancesValidateBeforeCall(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountBalances(Async)");
        }
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling getAccountBalances(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAccountBalances(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAccountBalancesCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Account Balances
     * Get Balances related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return BalancesGETResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BalancesGETResponse getAccountBalances(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<BalancesGETResponse> resp = getAccountBalancesWithHttpInfo(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get Account Balances
     * Get Balances related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;BalancesGETResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BalancesGETResponse> getAccountBalancesWithHttpInfo(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountBalancesValidateBeforeCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<BalancesGETResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Account Balances (asynchronously)
     * Get Balances related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountBalancesAsync(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<BalancesGETResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountBalancesValidateBeforeCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BalancesGETResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountBeneficiaries
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountBeneficiariesCall(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{AccountId}/beneficiaries"
            .replaceAll("\\{" + "AccountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PSUOAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountBeneficiariesValidateBeforeCall(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountBeneficiaries(Async)");
        }
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling getAccountBeneficiaries(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAccountBeneficiaries(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAccountBeneficiariesCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Account Beneficiaries
     * Get Beneficiaries related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return BeneficiariesGETResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BeneficiariesGETResponse getAccountBeneficiaries(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<BeneficiariesGETResponse> resp = getAccountBeneficiariesWithHttpInfo(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get Account Beneficiaries
     * Get Beneficiaries related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;BeneficiariesGETResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BeneficiariesGETResponse> getAccountBeneficiariesWithHttpInfo(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountBeneficiariesValidateBeforeCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<BeneficiariesGETResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Account Beneficiaries (asynchronously)
     * Get Beneficiaries related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountBeneficiariesAsync(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<BeneficiariesGETResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountBeneficiariesValidateBeforeCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BeneficiariesGETResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountDirectDebits
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountDirectDebitsCall(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{AccountId}/direct-debits"
            .replaceAll("\\{" + "AccountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PSUOAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountDirectDebitsValidateBeforeCall(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountDirectDebits(Async)");
        }
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling getAccountDirectDebits(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAccountDirectDebits(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAccountDirectDebitsCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Account Direct Debits
     * Get Direct Debits related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return AccountGETResponse1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountGETResponse1 getAccountDirectDebits(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<AccountGETResponse1> resp = getAccountDirectDebitsWithHttpInfo(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get Account Direct Debits
     * Get Direct Debits related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;AccountGETResponse1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountGETResponse1> getAccountDirectDebitsWithHttpInfo(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountDirectDebitsValidateBeforeCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<AccountGETResponse1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Account Direct Debits (asynchronously)
     * Get Direct Debits related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountDirectDebitsAsync(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<AccountGETResponse1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountDirectDebitsValidateBeforeCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountGETResponse1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountProduct
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountProductCall(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{AccountId}/product"
            .replaceAll("\\{" + "AccountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PSUOAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountProductValidateBeforeCall(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountProduct(Async)");
        }
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling getAccountProduct(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAccountProduct(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAccountProductCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Account Product
     * Get Product related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ProductGETResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProductGETResponse getAccountProduct(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<ProductGETResponse> resp = getAccountProductWithHttpInfo(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get Account Product
     * Get Product related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;ProductGETResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProductGETResponse> getAccountProductWithHttpInfo(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountProductValidateBeforeCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<ProductGETResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Account Product (asynchronously)
     * Get Product related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountProductAsync(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<ProductGETResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountProductValidateBeforeCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProductGETResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountRequest
     * @param accountRequestId Unique identification as assigned by the ASPSP to uniquely identify the account request resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountRequestCall(String accountRequestId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/account-requests/{AccountRequestId}"
            .replaceAll("\\{" + "AccountRequestId" + "\\}", apiClient.escapeString(accountRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "TPPOAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountRequestValidateBeforeCall(String accountRequestId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountRequestId' is set
        if (accountRequestId == null) {
            throw new ApiException("Missing the required parameter 'accountRequestId' when calling getAccountRequest(Async)");
        }
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling getAccountRequest(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAccountRequest(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAccountRequestCall(accountRequestId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get an account request
     * Get an account request
     * @param accountRequestId Unique identification as assigned by the ASPSP to uniquely identify the account request resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return AccountRequestPOSTResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountRequestPOSTResponse getAccountRequest(String accountRequestId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<AccountRequestPOSTResponse> resp = getAccountRequestWithHttpInfo(accountRequestId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get an account request
     * Get an account request
     * @param accountRequestId Unique identification as assigned by the ASPSP to uniquely identify the account request resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;AccountRequestPOSTResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountRequestPOSTResponse> getAccountRequestWithHttpInfo(String accountRequestId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountRequestValidateBeforeCall(accountRequestId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<AccountRequestPOSTResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get an account request (asynchronously)
     * Get an account request
     * @param accountRequestId Unique identification as assigned by the ASPSP to uniquely identify the account request resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountRequestAsync(String accountRequestId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<AccountRequestPOSTResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountRequestValidateBeforeCall(accountRequestId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountRequestPOSTResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountStandingOrders
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountStandingOrdersCall(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{AccountId}/standing-orders"
            .replaceAll("\\{" + "AccountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PSUOAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountStandingOrdersValidateBeforeCall(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountStandingOrders(Async)");
        }
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling getAccountStandingOrders(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAccountStandingOrders(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAccountStandingOrdersCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Account Standing Orders
     * Get Standing Orders related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return StandingOrdersGETResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StandingOrdersGETResponse getAccountStandingOrders(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<StandingOrdersGETResponse> resp = getAccountStandingOrdersWithHttpInfo(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get Account Standing Orders
     * Get Standing Orders related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;StandingOrdersGETResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StandingOrdersGETResponse> getAccountStandingOrdersWithHttpInfo(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountStandingOrdersValidateBeforeCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<StandingOrdersGETResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Account Standing Orders (asynchronously)
     * Get Standing Orders related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountStandingOrdersAsync(String accountId, String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<StandingOrdersGETResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountStandingOrdersValidateBeforeCall(accountId, xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StandingOrdersGETResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountTransactions
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param fromBookingDateTime The UTC ISO 8601 Date Time to filter transactions FROM - NB Time component is optional - set to 00:00:00 for just Date (optional)
     * @param toBookingDateTime The UTC ISO 8601 Date Time to filter transactions TO - NB Time component is optional - set to 00:00:00 for just Date (optional)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountTransactionsCall(String accountId, String xFapiFinancialId, String authorization, DateTime fromBookingDateTime, DateTime toBookingDateTime, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts/{AccountId}/transactions"
            .replaceAll("\\{" + "AccountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fromBookingDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fromBookingDateTime", fromBookingDateTime));
        if (toBookingDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "toBookingDateTime", toBookingDateTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PSUOAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountTransactionsValidateBeforeCall(String accountId, String xFapiFinancialId, String authorization, DateTime fromBookingDateTime, DateTime toBookingDateTime, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountTransactions(Async)");
        }
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling getAccountTransactions(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAccountTransactions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAccountTransactionsCall(accountId, xFapiFinancialId, authorization, fromBookingDateTime, toBookingDateTime, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Account Transactions
     * Get transactions related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param fromBookingDateTime The UTC ISO 8601 Date Time to filter transactions FROM - NB Time component is optional - set to 00:00:00 for just Date (optional)
     * @param toBookingDateTime The UTC ISO 8601 Date Time to filter transactions TO - NB Time component is optional - set to 00:00:00 for just Date (optional)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return AccountTransactionsGETResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountTransactionsGETResponse getAccountTransactions(String accountId, String xFapiFinancialId, String authorization, DateTime fromBookingDateTime, DateTime toBookingDateTime, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<AccountTransactionsGETResponse> resp = getAccountTransactionsWithHttpInfo(accountId, xFapiFinancialId, authorization, fromBookingDateTime, toBookingDateTime, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get Account Transactions
     * Get transactions related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param fromBookingDateTime The UTC ISO 8601 Date Time to filter transactions FROM - NB Time component is optional - set to 00:00:00 for just Date (optional)
     * @param toBookingDateTime The UTC ISO 8601 Date Time to filter transactions TO - NB Time component is optional - set to 00:00:00 for just Date (optional)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;AccountTransactionsGETResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountTransactionsGETResponse> getAccountTransactionsWithHttpInfo(String accountId, String xFapiFinancialId, String authorization, DateTime fromBookingDateTime, DateTime toBookingDateTime, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountTransactionsValidateBeforeCall(accountId, xFapiFinancialId, authorization, fromBookingDateTime, toBookingDateTime, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<AccountTransactionsGETResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Account Transactions (asynchronously)
     * Get transactions related to an account
     * @param accountId A unique identifier used to identify the account resource. (required)
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param fromBookingDateTime The UTC ISO 8601 Date Time to filter transactions FROM - NB Time component is optional - set to 00:00:00 for just Date (optional)
     * @param toBookingDateTime The UTC ISO 8601 Date Time to filter transactions TO - NB Time component is optional - set to 00:00:00 for just Date (optional)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountTransactionsAsync(String accountId, String xFapiFinancialId, String authorization, DateTime fromBookingDateTime, DateTime toBookingDateTime, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<AccountTransactionsGETResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountTransactionsValidateBeforeCall(accountId, xFapiFinancialId, authorization, fromBookingDateTime, toBookingDateTime, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountTransactionsGETResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccounts
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountsCall(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PSUOAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountsValidateBeforeCall(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling getAccounts(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAccounts(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAccountsCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Accounts
     * Get a list of accounts
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return AccountGETResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountGETResponse getAccounts(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<AccountGETResponse> resp = getAccountsWithHttpInfo(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get Accounts
     * Get a list of accounts
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;AccountGETResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountGETResponse> getAccountsWithHttpInfo(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountsValidateBeforeCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<AccountGETResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Accounts (asynchronously)
     * Get a list of accounts
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountsAsync(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<AccountGETResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountsValidateBeforeCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountGETResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBalances
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBalancesCall(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/balances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PSUOAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBalancesValidateBeforeCall(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling getBalances(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getBalances(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getBalancesCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Balances
     * Get Balances
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return BalancesGETResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BalancesGETResponse getBalances(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<BalancesGETResponse> resp = getBalancesWithHttpInfo(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get Balances
     * Get Balances
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;BalancesGETResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BalancesGETResponse> getBalancesWithHttpInfo(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getBalancesValidateBeforeCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<BalancesGETResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Balances (asynchronously)
     * Get Balances
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBalancesAsync(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<BalancesGETResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBalancesValidateBeforeCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BalancesGETResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBeneficiaries
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBeneficiariesCall(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/beneficiaries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PSUOAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBeneficiariesValidateBeforeCall(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling getBeneficiaries(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getBeneficiaries(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getBeneficiariesCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Beneficiaries
     * Get Beneficiaries
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return BeneficiariesGETResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BeneficiariesGETResponse getBeneficiaries(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<BeneficiariesGETResponse> resp = getBeneficiariesWithHttpInfo(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get Beneficiaries
     * Get Beneficiaries
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;BeneficiariesGETResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BeneficiariesGETResponse> getBeneficiariesWithHttpInfo(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getBeneficiariesValidateBeforeCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<BeneficiariesGETResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Beneficiaries (asynchronously)
     * Get Beneficiaries
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBeneficiariesAsync(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<BeneficiariesGETResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBeneficiariesValidateBeforeCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BeneficiariesGETResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDirectDebits
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDirectDebitsCall(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/direct-debits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PSUOAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDirectDebitsValidateBeforeCall(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling getDirectDebits(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getDirectDebits(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDirectDebitsCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Direct Debits
     * Get Direct Debits
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return AccountGETResponse1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountGETResponse1 getDirectDebits(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<AccountGETResponse1> resp = getDirectDebitsWithHttpInfo(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get Direct Debits
     * Get Direct Debits
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;AccountGETResponse1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountGETResponse1> getDirectDebitsWithHttpInfo(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getDirectDebitsValidateBeforeCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<AccountGETResponse1>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Direct Debits (asynchronously)
     * Get Direct Debits
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDirectDebitsAsync(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<AccountGETResponse1> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDirectDebitsValidateBeforeCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountGETResponse1>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProducts
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProductsCall(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PSUOAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProductsValidateBeforeCall(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling getProducts(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getProducts(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getProductsCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Products
     * Get Products
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ProductGETResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProductGETResponse getProducts(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<ProductGETResponse> resp = getProductsWithHttpInfo(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get Products
     * Get Products
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;ProductGETResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProductGETResponse> getProductsWithHttpInfo(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getProductsValidateBeforeCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<ProductGETResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Products (asynchronously)
     * Get Products
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProductsAsync(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<ProductGETResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProductsValidateBeforeCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProductGETResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStandingOrders
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStandingOrdersCall(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/standing-orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PSUOAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStandingOrdersValidateBeforeCall(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling getStandingOrders(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getStandingOrders(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStandingOrdersCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Standing Orders
     * Get Standing Orders
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return StandingOrdersGETResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StandingOrdersGETResponse getStandingOrders(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        ApiResponse<StandingOrdersGETResponse> resp = getStandingOrdersWithHttpInfo(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId);
        return resp.getData();
    }

    /**
     * Get Standing Orders
     * Get Standing Orders
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @return ApiResponse&lt;StandingOrdersGETResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StandingOrdersGETResponse> getStandingOrdersWithHttpInfo(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId) throws ApiException {
        com.squareup.okhttp.Call call = getStandingOrdersValidateBeforeCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, null, null);
        Type localVarReturnType = new TypeToken<StandingOrdersGETResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Standing Orders (asynchronously)
     * Get Standing Orders
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStandingOrdersAsync(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, final ApiCallback<StandingOrdersGETResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStandingOrdersValidateBeforeCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StandingOrdersGETResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactions
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param fromBookingDateTime The UTC ISO 8601 Date Time to filter transactions FROM - NB Time component is optional - set to 00:00:00 for just Date (optional)
     * @param toBookingDateTime The UTC ISO 8601 Date Time to filter transactions TO - NB Time component is optional - set to 00:00:00 for just Date (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionsCall(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, DateTime fromBookingDateTime, DateTime toBookingDateTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (fromBookingDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fromBookingDateTime", fromBookingDateTime));
        if (toBookingDateTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "toBookingDateTime", toBookingDateTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xFapiFinancialId != null)
        localVarHeaderParams.put("x-fapi-financial-id", apiClient.parameterToString(xFapiFinancialId));
        if (xFapiCustomerLastLoggedTime != null)
        localVarHeaderParams.put("x-fapi-customer-last-logged-time", apiClient.parameterToString(xFapiCustomerLastLoggedTime));
        if (xFapiCustomerIpAddress != null)
        localVarHeaderParams.put("x-fapi-customer-ip-address", apiClient.parameterToString(xFapiCustomerIpAddress));
        if (xFapiInteractionId != null)
        localVarHeaderParams.put("x-fapi-interaction-id", apiClient.parameterToString(xFapiInteractionId));
        if (authorization != null)
        localVarHeaderParams.put("authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "PSUOAuth2Security" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionsValidateBeforeCall(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, DateTime fromBookingDateTime, DateTime toBookingDateTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xFapiFinancialId' is set
        if (xFapiFinancialId == null) {
            throw new ApiException("Missing the required parameter 'xFapiFinancialId' when calling getTransactions(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getTransactions(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTransactionsCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, fromBookingDateTime, toBookingDateTime, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Transactions
     * Get Transactions
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param fromBookingDateTime The UTC ISO 8601 Date Time to filter transactions FROM - NB Time component is optional - set to 00:00:00 for just Date (optional)
     * @param toBookingDateTime The UTC ISO 8601 Date Time to filter transactions TO - NB Time component is optional - set to 00:00:00 for just Date (optional)
     * @return AccountTransactionsGETResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountTransactionsGETResponse getTransactions(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, DateTime fromBookingDateTime, DateTime toBookingDateTime) throws ApiException {
        ApiResponse<AccountTransactionsGETResponse> resp = getTransactionsWithHttpInfo(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, fromBookingDateTime, toBookingDateTime);
        return resp.getData();
    }

    /**
     * Get Transactions
     * Get Transactions
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param fromBookingDateTime The UTC ISO 8601 Date Time to filter transactions FROM - NB Time component is optional - set to 00:00:00 for just Date (optional)
     * @param toBookingDateTime The UTC ISO 8601 Date Time to filter transactions TO - NB Time component is optional - set to 00:00:00 for just Date (optional)
     * @return ApiResponse&lt;AccountTransactionsGETResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountTransactionsGETResponse> getTransactionsWithHttpInfo(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, DateTime fromBookingDateTime, DateTime toBookingDateTime) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsValidateBeforeCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, fromBookingDateTime, toBookingDateTime, null, null);
        Type localVarReturnType = new TypeToken<AccountTransactionsGETResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Transactions (asynchronously)
     * Get Transactions
     * @param xFapiFinancialId The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
     * @param authorization An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
     * @param xFapiCustomerLastLoggedTime The time when the PSU last logged in with the TPP. (optional)
     * @param xFapiCustomerIpAddress The PSU&#39;s IP address if the PSU is currently logged in with the TPP. (optional)
     * @param xFapiInteractionId An RFC4122 UID used as a correlation id. (optional)
     * @param fromBookingDateTime The UTC ISO 8601 Date Time to filter transactions FROM - NB Time component is optional - set to 00:00:00 for just Date (optional)
     * @param toBookingDateTime The UTC ISO 8601 Date Time to filter transactions TO - NB Time component is optional - set to 00:00:00 for just Date (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsAsync(String xFapiFinancialId, String authorization, String xFapiCustomerLastLoggedTime, String xFapiCustomerIpAddress, String xFapiInteractionId, DateTime fromBookingDateTime, DateTime toBookingDateTime, final ApiCallback<AccountTransactionsGETResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsValidateBeforeCall(xFapiFinancialId, authorization, xFapiCustomerLastLoggedTime, xFapiCustomerIpAddress, xFapiInteractionId, fromBookingDateTime, toBookingDateTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountTransactionsGETResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
